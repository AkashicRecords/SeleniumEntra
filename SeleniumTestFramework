using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using System;
using System.Threading.Tasks;
using Microsoft.Identity.Client;

namespace SeleniumTestFramework
{
    [TestClass]
    public class SeleniumTests
    {
        private IWebDriver driver;
        private WebDriverWait wait;

        [TestInitialize]
        public void TestInitialize()
        {
            // Setup driver based on environment variable (can be set in Azure Pipeline)
            string browser = Environment.GetEnvironmentVariable("BROWSER") ?? "chrome";
            
            switch (browser.ToLower())
            {
                case "chrome":
                    driver = new ChromeDriver();
                    break;
                case "firefox":
                    driver = new FirefoxDriver();
                    break;
                case "edge":
                    driver = new EdgeDriver();
                    break;
                default:
                    throw new ArgumentException($"Browser {browser} is not supported.");
            }

            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));
        }

        [TestMethod]
        public async Task TestMicrosoftEntraAuthentication()
        {
            // Microsoft Entra (Azure AD) authentication
            IConfidentialClientApplication app = ConfidentialClientApplicationBuilder
                .Create(Environment.GetEnvironmentVariable("CLIENT_ID"))
                .WithClientSecret(Environment.GetEnvironmentVariable("CLIENT_SECRET"))
                .WithAuthority(new Uri(Environment.GetEnvironmentVariable("AUTHORITY")))
                .Build();

            string[] scopes = { "user.read" };
            AuthenticationResult result = await app.AcquireTokenForClient(scopes).ExecuteAsync();

            // Use the access token for further API calls or validations
            Assert.IsNotNull(result.AccessToken, "Access token should not be null");

            // Example Selenium test
            driver.Navigate().GoToUrl("https://example.com");
            IWebElement element = wait.Until(d => d.FindElement(By.Id("exampleElement")));
            Assert.IsTrue(element.Displayed, "Element should be visible");
        }

        [TestCleanup]
        public void TestCleanup()
        {
            driver?.Quit();
        }
    }
}
